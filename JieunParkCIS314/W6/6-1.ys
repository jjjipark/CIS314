.pos 0 
init:   
    irmovl Stack, %esp      # Set up stack pointer  
    irmovl Stack, %ebp      # Set up base pointer   
    call Main               # Execute main program
    halt
    
# Array of 10 elements
    .pos 0x104
    .align 4    
array:  
    .long 0x0002
    .long 0x0001
    .long 0x0004
    .long 0x0005
    .long 0x0003
    .long 0x0002
    .long 0x0001
    .long 0x0004
    .long 0x0005
    .long 0x0003

Main:   
    pushl %ebp 
    rrmovl %esp, %ebp
    irmovl $5, %eax 
    pushl %eax          # push array length
    irmovl array, %edx
    pushl %edx          # push &array
    call _sortArray           
    rrmovl %ebp, %esp
    popl %ebp
    ret 

_sortArray:                             ## @sortArray
    pushl   %ebp
    rrmovl  %esp, %ebp
    pushl   %ebx             # callee saves ebx
    pushl   %edi             # callee saves edi
    pushl   %esi             # callee saves esi
    mrmovl  12(%ebp), %esi     #length
    irmovl  $2, %ebx
    subl    %ebx, %esi
    jl  LBB1_8
## BB#1:
    mrmovl  8(%ebp), %edi       # array
    irmovl  $-1, %ecx       #leal   -1(%esi), %eax
    addl    %ecx, %esi      # lenth -1
    rrmovl  %esi, %eax      # eax = length-1
    rmmovl  %eax, -20(%ebp)      
    xorl    %ebx, %ebx      #i = 0

LBB1_2:                                 
    rrmovl  %ebx, %edx      #edx(min) = i
    rmmovl  %edx, -16(%ebp)  
    irmovl  $1, %ecx         #leal   1(%edx), %ebx
    addl    %ecx, %edx       #edx(j) = edx+1
    rrmovl  %edx, %ebx       #ebx<= edx(j)
    subl    %esi, %ebx       # j-length, #cmpl   %esi, %ebx
    rrmovl  %ebx, %ecx       # ecx(min) = j
    jge LBB1_7

LBB1_3:                               
    addl    %edx, %edx        #movl (%edi,%edx,4), %eax #arr[j]
    addl    %edx, %edx
    addl    %edi, %edx
    rrmovl  %edx, %eax  #array[j]
    addl    %ecx, %ecx
    addl    %ecx, %ecx
    addl    %edi, %ecx  #array[min]
    subl    %ecx, %eax        #cmpl   (%edi,%ecx,4), %eax
    rrmovl  %ecx, %eax     
    jg  LBB1_5
## BB#4:                                
    rrmovl  %edx, %eax  
LBB1_5:                                 
    irmovl  $1, %edx       
    addl    %edx, %ecx  #j++, (#incl  %ecx     #j++)
    subl    %ecx, %esi  #length - j,(#cmpl   %ecx, %esi)
    rrmovl  %eax, %edx
    jne LBB1_3
## BB#6:                                
    mrmovl  -16(%ebp), %edx    
    subl    %edx, %eax          #cmpl   -16(%ebp), %eax #min:i
    je  LBB1_7
## BB#9:                               
    mrmovl  -16(%ebp), %ecx   #ecx= min     
    addl    %ecx, %ecx
    addl    %ecx, %ecx
    addl    %edi, %ecx  #arrary[min],#leal   (%edi,%ecx,4), %ecx
    addl    %eax, %eax
    addl    %eax, %eax
    addl    %edi, %eax  #arrary[i],#leal   (%edi,%eax,4), %eax
    rmmovl  %eax, 4(%esp)
    rmmovl  %ecx, (%esp)
    call    _swap       #swap(array[i],array[min])
LBB1_7:                                 
    mrmovl  -20(%ebp), %eax
    subl    %eax, %ebx       #cmpl   -20(%ebp), %ebx
    jl  LBB1_2
LBB1_8:                                
    popl    %esi
    popl    %edi
    popl    %ebx
    popl    %ebp
    ret


_swap:                                  ## @swap
## BB#0:
    pushl   %ebp
    rrmovl  %esp, %ebp
    pushl   %esi
    mrmovl  12(%ebp), %eax
    mrmovl  8(%ebp), %ecx
    mrmovl  (%ecx), %edx
    mrmovl  (%eax), %esi
    rmmovl  %esi, (%ecx)
    rmmovl  %edx, (%eax)
    popl    %esi
    popl    %ebp
    ret


end:
    popl %esi  # restores esi
    popl %edi  # restores edi
    popl %ebx  # restores ebx    
    rrmovl %ebp, %esp
    popl %ebp
    ret


.pos 0x100
Stack:

